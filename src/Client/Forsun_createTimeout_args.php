<?php
namespace Snower\LaravelForsun\Client;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Forsun_createTimeout_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $second = null;
  /**
   * @var int
   */
  public $minute = -1;
  /**
   * @var int
   */
  public $hour = -1;
  /**
   * @var int
   */
  public $day = -1;
  /**
   * @var int
   */
  public $month = -1;
  /**
   * @var int
   */
  public $week = -1;
  /**
   * @var int
   */
  public $count = 1;
  /**
   * @var string
   */
  public $action = "shell";
  /**
   * @var array
   */
  public $params = array(
  );

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'second',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'minute',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'hour',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'day',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'month',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'week',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'count',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['second'])) {
        $this->second = $vals['second'];
      }
      if (isset($vals['minute'])) {
        $this->minute = $vals['minute'];
      }
      if (isset($vals['hour'])) {
        $this->hour = $vals['hour'];
      }
      if (isset($vals['day'])) {
        $this->day = $vals['day'];
      }
      if (isset($vals['month'])) {
        $this->month = $vals['month'];
      }
      if (isset($vals['week'])) {
        $this->week = $vals['week'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
    }
  }

  public function getName() {
    return 'Forsun_createTimeout_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->second);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->minute);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->hour);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->day);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->month);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->week);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = '';
              $val24 = '';
              $xfer += $input->readString($key23);
              $xfer += $input->readString($val24);
              $this->params[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Forsun_createTimeout_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->second !== null) {
      $xfer += $output->writeFieldBegin('second', TType::I16, 2);
      $xfer += $output->writeI16($this->second);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minute !== null) {
      $xfer += $output->writeFieldBegin('minute', TType::I16, 3);
      $xfer += $output->writeI16($this->minute);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hour !== null) {
      $xfer += $output->writeFieldBegin('hour', TType::I16, 4);
      $xfer += $output->writeI16($this->hour);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day !== null) {
      $xfer += $output->writeFieldBegin('day', TType::I16, 5);
      $xfer += $output->writeI16($this->day);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->month !== null) {
      $xfer += $output->writeFieldBegin('month', TType::I16, 6);
      $xfer += $output->writeI16($this->month);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->week !== null) {
      $xfer += $output->writeFieldBegin('week', TType::I16, 7);
      $xfer += $output->writeI16($this->week);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I16, 8);
      $xfer += $output->writeI16($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 9);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter25 => $viter26)
          {
            $xfer += $output->writeString($kiter25);
            $xfer += $output->writeString($viter26);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

